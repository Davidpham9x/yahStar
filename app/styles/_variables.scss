$font-standard: HelveticaNeue, Helvetica, Arial, sans-serif;

$font-size: 16px;

$base-color: #6a6060;

$color-hover: #ffdf16;
$color-link: #ffffff;
$color-error: #f91059;

$page-width: 1200px;
$grid: 30px;

@mixin spritePos($x, $y, $w, $h) {
    background-image: url(../images/ui.png);
    background-position: #{-($x * $grid)} #{-($y * $grid)};
    background-repeat: none;
    width: $w;
    height: $h;
}

@mixin ab($t, $l, $b, $r) {
    position: absolute;
    display: block;
    @if $t !=n {
        top: $t;
    }
    @if $r !=n {
        right: $r;
    }
    @if $b !=n {
        bottom: $b;
    }
    @if $l !=n {
        left: $l;
    }
}

@mixin border-radius($tl, $tr:null, $br:null, $bl:null) {
    @if ($tr and $br and $bl) {
        border-radius: $tl $tr $br $bl;
        -moz-border-radius: $tl $tr $br $bl;
        -webkit-border-radius: $tl $tr $br $bl;
    }
    @else {
        border-radius: $tl;
        -moz-border-radius: $tl;
        -webkit-border-radius: $tl;
    }
}

//transform origin
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
    -o-transform-origin: $origin;
    -ms-transform-origin: $origin;
    -webkit-transform-origin: $origin;
    transform-origin: $origin;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $top $left $blur $color;
        -moz-box-shadow: inset $top $left $blur $color;
        box-shadow: inset $top $left $blur $color;
    }
    @else {
        -webkit-box-shadow: $top $left $blur $color;
        -moz-box-shadow: $top $left $blur $color;
        box-shadow: $top $left $blur $color;
    }
}

@mixin opacity ( $value: 0.5) {
    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" $value * 100 ")";
    filter: alpha(opacity=$value * 100);
    zoom: 1;
}

@mixin CSSanimate($type, $duration, $ease) {
    -moz-transition: $type $duration $ease;
    -webkit-transition: $type $duration $ease;
    -ms-transition: $type $duration $ease;
    -o-transition: $type $duration $ease;
    transition: $type $duration $ease;
}

@mixin transition($args) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

@mixin font-size($size: 16) {
    font-size: $size + px;
    font-size: ($size / 16) * 1rem;
}

@mixin line-height($size: 16) {
    line-height: $size + px;
    line-height: ($size / 16) * 1rem;
}

@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}


/* instead of indent -9999px */

@mixin clear-text() {
    border: 0;
    color: transparent;
    font: 0/0 a;
    text-shadow: none;
}

@mixin respond-to($media) {
    @if $media==mobile {
        @media only screen and (max-width: 767px) {
            @content;
        }
    }
    @else if $media==ipad {
        @media only screen and (min-width: 768px) and (max-width: 1024px) {
            @content;
        }
    }
    @else if $media==ipadPortrait {
        @media only screen and (min-width: 768px) and (max-width: 1023px) {
            @content;
        }
    }
    @else if $media==ipadLandscape {
        @media only screen and (width: 1024px) {
            @content;
        }
    }
    @else if $media==normalScreen {
        @media only screen and (min-width: 1200px) {
            @content;
        }
    }
    @else if $media==largeScreen {
        @media only screen and (min-width: 1025px) and (max-width: 1440px) {
            @content;
        }
    }
    @else if $media==wideScreen {
        @media only screen and (min-width: 1441px) {
            @content;
        }
    }
    @else if $media==desktop {
        @media only screen and (min-width: 1024px) {
            @content;
        }
    }
}

// MEDIA QUERIES
$breakpoints: ( xs: 340px, small: 480px, medium: 640px, ipadPortrait: 768px, ipad: 1024px, large: 1280px, big: 1366px, hd: 1440px );
@mixin screen($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
            @content;
        }
    }
    @else {
        @content;
    }
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {Keyword | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
/// @include linear-gradient(to right, #90bf28 0%, #ecc204 50%, #ef8307 100%);
@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction)==false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

/// Test if `$value` is a valid direction
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value)=='number' and index('deg' 'grad' 'turn' 'rad', unit($value));
    @return $is-keyword or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
    @if is-direction($value)==false {
        @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
    }
    $conversion-map: ( to top: bottom, to top right: bottom left, to right top: left bottom, to right: left, to bottom right: top left, to right bottom: left top, to bottom: top, to bottom left: top right, to left bottom: right top, to left: right, to left top: right bottom, to top left: bottom right);
    @if map-has-key($conversion-map, $value) {
        @return map-get($conversion-map, $value);
    }
    @return 90deg - $value;
}

/*
 * 'rem' is a Sass mixin that converts pixel values to rem values for whatever property is passed to it.
 * It returns two lines of code â€” one of the regular pixel values (for IE), and another with the
 * converted rem values (for everyone else). Special thanks to Chris Epstein (http://chriseppstein.github.com)
 * and Martin Bavio (http://martinbavio.com) for the help and code!
 *
 * Sample input:
 * .element {
 *   @include rem('padding',10px 0 2px 5px);
 * }
 *
 * Sample output:
 * .element {
 *   padding: 10px 0 2px 5px;
 *   padding: 1rem 0 0.2rem 0.5rem;
 * }
 *
 */

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline_px: 16px;
@mixin rem($property, $px_values) {
    // Convert the baseline into rems
    $baseline_rem: ($baseline_px / 1rem);
    // Print the first line in pixel values
    #{$property}: $px_values;
    // If there is only one (numeric) value, return the property/value line for it.
    @if type-of($px_values)=='number' {
        #{$property}: $px_values / $baseline_rem;
    }
    // If there is more than one value, create a list and perform equations on each value
    @else {
        // Create an empty list that we can dump values into
        $rem_values: ();
        @each $value in $px_values {
            // If the value is zero, return 0
            @if $value==0 {
                $rem_values: append($rem_values, $value);
            }
            // If the value is not zero, convert it from px to rem
            @else {
                $rem_values: append($rem_values, ($value / $baseline_rem));
            }
        }
        // Return the property and its list of converted values
        #{$property}: $rem_values;
    }
}

// mixin
@mixin angle($pseudo, $flip: false, $angle: 1.5deg) {
  // Possible values for $pseudo are: before, after, both
  @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {
    position: relative;
    z-index: 1;
    $selector: if($pseudo == 'both', '&:before,&:after', '&:#{$pseudo}');

    #{$selector} {
      background: inherit;
      content: '';
      display: block;
      height: 50%;
      left: 0;
      position: absolute;
      right: 0;
      z-index: -1;
      -webkit-backface-visibility: hidden; // for Chrome Windows
    }

    @if $pseudo == 'before' {
      #{$selector} {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }
    }

    @if $pseudo == 'after' {
      #{$selector} {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 100%;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }

    @if $pseudo == 'both' {
      &:before {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }

      &:after {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }
  }
}

@mixin responsive($min-width) {
    @media screen and (min-width: #{$min-width}px) {
        @content;
    }
}
